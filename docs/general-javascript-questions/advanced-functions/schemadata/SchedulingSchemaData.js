const StructuredData = {
  '@context': 'https://schema.org',
  '@type': 'FAQPage',
  mainEntity: [
    {
      '@type': 'Question',
      name: 'What are the two most common JavaScript methods used for scheduling a call?',
      acceptedAnswer: {
        '@type': 'Answer',
        text: 'There are two commonly used methods for scheduling calls in JavaScript, including the setTimeout and setInterval methods. setTimeout allows us to run a function once after the interval of time. setInterval allows us to run a function repeatedly, starting after the interval of time, then repeating continuously at that interval. Both methods are helpful when you need to schedule specific events or actions in JavaScript. These methods donâ€™t get included in the JavaScript specification. However, most settings have an internal scheduler, and these methods are available. All browsers, as well as Node.js, support them. Both methods are part of the WindowOrGlobalScope interface as a specification.',
      },
    },
    {
      '@type': 'Question',
      name: 'Can you explain the function and syntax of the setTimeout() method?',
      acceptedAnswer: {
        '@type': 'Answer',
        text: 'he setTimeout() function of the WindowOrWorkerGlobalScope mixin (the Window. setTimeout()) creates a timer that, when it expires, executes a function or provides a piece of code. The func/code, delay (optional), and several optional arguments are all parameters. The func / code must be present, but the delay and optional arguments are not. If the delay option is not specified, a value of 0 is used, which means that the event is executed immediately, or more precisely, the following event cycle. You should note that the actual delay may be greater than anticipated in any instance. The timerID returned by setTimeout() is a positive integer value that identifies the timer generated by the call; this value may be provided to clearTimeout() to cancel the timeout.',
      },
    },
    {
      '@type': 'Question',
      name: 'Can you explain the function and syntax of the clearTimeout() method?',
      acceptedAnswer: {
        '@type': 'Answer',
        text: 'The clearTimeout method clears a timer set with the setTimeout method. The timer value returned by setTimeout gets used as the clearTimeout method parameter.',
      },
    },
    {
      '@type': 'Question',
      name: 'Can you explain the function and syntax of the setInterval() method?',
      acceptedAnswer: {
        '@type': 'Answer',
        text: 'The setInterval method has the same syntax as setTimeout. Parameters include the func/code, delay (optional), and some optional arguments. The func / code is required, but delay and optional arguments are not. The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function or code. See Delay restrictions below for details on the acceptable range of delay values. All arguments have the same meaning. But unlike setTimeout it runs the function not only once but regularly after the given interval of time. To stop further calls, we should call clearInterval(timerId).',
      },
    },
    {
      '@type': 'Question',
      name: 'How does garbage collection work with the setInterval and setTimeout callbacks?',
      acceptedAnswer: {
        '@type': 'Answer',
        text: 'When a function gets passed in setInterval/setTimeout, an internal reference is created to it and saved in the scheduler. It prevents the function from being garbage collected, even if there are no other references to it. For setInterval the function stays in memory until clearInterval gets called. There is a side-effect. A function references the outer lexical environment, so, while it lives, outer variables live too. They may take much more memory than the function itself. So, when we do not need the scheduled function anymore, it is better to cancel it, even if it is small.',
      },
    },
    {
      '@type': 'Question',
      name: 'How does zero delay setTimeout execute in JavaScript?',
      acceptedAnswer: {
        '@type': 'Answer',
        text: 'In JavaScript, zero delay setTimeout schedules the function call execution after the current execution is complete. The function gets scheduled to run after the current script.',
      },
    },
  ],
};

export default StructuredData;
